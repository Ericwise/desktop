#include <node.h>
#include "nan.h"
#include "turtl.h"
#include "msg.h"
#include "async.h"

using namespace v8;

/**
 * A worker class that helps us load our lisp app async. May not be necessary.
 */
class turtl_init_worker : public NanAsyncWorker {
	public:
		turtl_init_worker(NanCallback *callback) : NanAsyncWorker(callback) {}
		~turtl_init_worker() {}

		void Execute()
		{
			init_messaging();
			int res = turtl_init();
			if(res != 0) errmsg = "There was an error booting Turtl";
		}

		void HandleOKCallback()
		{
			NanScope();
			Local<Value> argv[] = { NanNewLocal<Value>(Null()) };
			callback->Call(1, argv);
		}

		void HandleErrorCallback()
		{
			NanScope();
			Local<Value> argv[] = { Number::New(-1) };
			callback->Call(1, argv);
		}
};

/**
 * Load and start our lisp app, async.
 */
NAN_METHOD(load_turtl_async) {
	NanScope();

	NanCallback *callback = new NanCallback(args[0].As<Function>());
	NanAsyncQueueWorker(new turtl_init_worker(callback));
	NanReturnUndefined();
}

