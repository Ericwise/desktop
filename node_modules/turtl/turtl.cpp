#include <node.h>
#include "nan.h"
#include "turtl.h"
#include "msg.h"

using namespace v8;

/**
 * Load and start our lisp app, synchronously.
 */
NAN_METHOD(start_lisp) {
	NanScope();

	FILE *fp;

	// do some logging because NW on windows not only eats STDOUT, it mkes lisp
	// go batshit insane when trying to print to STDOUT. we need this log to
	// see what weird things happen under the hood.
	fp = fopen("./nw.log", "w");
	//fp = stdout;
	fprintf(fp, "log init: %d\n", stdout);
	init_messaging();
	fprintf(fp, "messaging init\n");
	uint8_t flags = 0;
	// enable push
	flags = flags | (1 << TURTL_FLAG_PUSH_MESSAGES);
	int init = turtl_init(flags);
	if(init == 0)
	{
		fprintf(fp, "turtl: init done\n");
	}
	else
	{
		fprintf(fp, "turtl: init fail: %s\n", turtl_get_last_error());
	}
	fclose(fp);

	NanReturnUndefined();
}

/**
 * End/shutdown lisp
 */
NAN_METHOD(stop_lisp) {
	NanScope();
	turtl_shutdown();
	NanReturnUndefined();
}

void RegisterModule(Handle<Object> exports)
{
	exports->Set(NanSymbol("start"),
			FunctionTemplate::New(start_lisp)->GetFunction());
	exports->Set(NanSymbol("stop"),
			FunctionTemplate::New(stop_lisp)->GetFunction());
	exports->Set(NanSymbol("set_msg_callback"),
			FunctionTemplate::New(set_msg_callback)->GetFunction());
	exports->Set(NanSymbol("send_msg_lisp"),
			FunctionTemplate::New(send_msg_lisp)->GetFunction());
}

NODE_MODULE(turtl, RegisterModule);

